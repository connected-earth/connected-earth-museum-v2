export class CameraControls{constructor(t,e){this.camera=t,this.renderer=e,this.yaw=t.rotation.y,this.pitch=t.rotation.x,this.rotationSpeed=.003,this.camera.rotation.order="YXZ",this.isDragging=!1,this.dragEnabled=!0,this.previousMousePosition={x:0,y:0},this.initEventListeners()}initEventListeners(){this.renderer.domElement.addEventListener("mousedown",(t=>{this.dragEnabled&&0===t.button&&(this.isDragging=!0,this.previousMousePosition={x:t.clientX,y:t.clientY})})),this.renderer.domElement.addEventListener("mousemove",(t=>{if(!this.dragEnabled||!this.isDragging)return;const e={x:-(t.clientX-this.previousMousePosition.x),y:-(t.clientY-this.previousMousePosition.y)};this.updateCameraRotation(e.x,e.y),this.previousMousePosition={x:t.clientX,y:t.clientY}})),document.addEventListener("mouseup",(t=>{this.dragEnabled&&0===t.button&&(this.isDragging=!1)})),this.renderer.domElement.addEventListener("touchstart",(t=>{this.dragEnabled&&1===t.touches.length&&(this.isDragging=!0,this.previousMousePosition={x:t.touches[0].clientX,y:t.touches[0].clientY})})),this.renderer.domElement.addEventListener("touchmove",(t=>{if(!this.dragEnabled||!this.isDragging||1!==t.touches.length)return;const e={x:-(t.touches[0].clientX-this.previousMousePosition.x),y:-(t.touches[0].clientY-this.previousMousePosition.y)};this.updateCameraRotation(e.x,e.y),this.previousMousePosition={x:t.touches[0].clientX,y:t.touches[0].clientY},t.preventDefault()})),this.renderer.domElement.addEventListener("touchend",(()=>{this.isDragging=!1}))}updateCameraRotation(t,e){this.yaw-=t*this.rotationSpeed,this.pitch-=e*this.rotationSpeed;const i=Math.PI/2-.1,s=-Math.PI/2+.1;this.pitch=Math.max(s,Math.min(i,this.pitch)),this.camera.rotation.set(this.pitch,this.yaw,0,"YXZ")}enableDrag(){this.dragEnabled=!0}disableDrag(){this.dragEnabled=!1}}