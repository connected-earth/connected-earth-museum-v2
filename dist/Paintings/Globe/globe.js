let scene,camera,renderer,orbitControl,gui,currYear,currentImage="",currentImage2="",currentTextureArray=[],currMin=0,currMax=0;const uniforms={size:{value:3},colorTexture:{value:null},elevTexture:{value:null},alphaTexture:{value:null}};let overlayImageEl,overlayImage2El;function createStarfield({numStars:e=500,sprite:r}={}){function a(){const e=25*Math.random()+25,r=Math.random(),a=Math.random(),t=2*Math.PI*r,n=Math.acos(2*a-1);let o=e*Math.sin(n)*Math.cos(t),i=e*Math.sin(n)*Math.sin(t),s=e*Math.cos(n);return{pos:new THREE.Vector3(o,i,s),hue:.6,minDist:e}}const t=[],n=[],o=[];let i;for(let r=0;r<e;r+=1){let e=a();const{pos:r,hue:s}=e;o.push(e),i=(new THREE.Color).setHSL(s,.2,Math.random()),t.push(r.x,r.y,r.z),n.push(i.r,i.g,i.b)}const s=new THREE.BufferGeometry;s.setAttribute("position",new THREE.Float32BufferAttribute(t,3)),s.setAttribute("color",new THREE.Float32BufferAttribute(n,3));const l=new THREE.PointsMaterial({size:.2,vertexColors:!0,map:r});return new THREE.Points(s,l)}const loadTextures=(e,r,a)=>{const t=[];for(let n=e;n<r;n++)t.push(textureLoader.load(a.replace("{year}",n)));return t};function navigate(e,r){console.log("Navigating to:",e,r)}const textureLoader=new THREE.TextureLoader;let starSprite,earthMap,elevMap,alphaMap,tempTextures,oceanTempTextures,vegTextures,carbonTextures,fireTextures;function initTextures(){starSprite=textureLoader.load("../../assets/globe/star.png"),earthMap=textureLoader.load("../../assets/globe/00_earthmap1k.jpg"),elevMap=textureLoader.load("../../assets/globe/01_earthbump1k.jpg"),alphaMap=textureLoader.load("../../assets/globe/02_earthspec1k.jpg"),tempTextures=loadTextures(2e3,2025,"../../assets/globe/avg_temperature_land/{year}.png"),oceanTempTextures=loadTextures(2010,2025,"../../assets/globe/avg_temperature_ocean/{year}.jpeg"),vegTextures=loadTextures(2013,2025,"../../assets/globe/vegetation/{year}.jpeg"),carbonTextures=loadTextures(2015,2024,"../../assets/globe/carbon/{year}.jpeg"),fireTextures=loadTextures(2015,2025,"../../assets/globe/fire/{year}.jpeg"),uniforms.colorTexture.value=earthMap,uniforms.elevTexture.value=elevMap,uniforms.alphaTexture.value=alphaMap}function initScene(){scene=new THREE.Scene,camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,.1,1e3),camera.position.set(0,0,4),renderer=new THREE.WebGLRenderer({antialias:!0}),renderer.setSize(window.innerWidth,window.innerHeight),renderer.setPixelRatio(window.devicePixelRatio),document.getElementById("globe-render").appendChild(renderer.domElement),orbitControl=new THREE.OrbitControls(camera,renderer.domElement),orbitControl.enableDamping=!0,orbitControl.autoRotate=!0,orbitControl.autoRotateSpeed=2.4,orbitControl.minDistance=1.8,orbitControl.maxDistance=40;const e=new THREE.Group,r=new THREE.SphereGeometry(1,20,20),a=new THREE.MeshBasicMaterial({color:2105376,wireframe:!0}),t=new THREE.Mesh(r,a);e.add(t),scene.add(e);const n=new THREE.IcosahedronGeometry(1,120),o=new THREE.ShaderMaterial({uniforms,vertexShader:"\n    uniform float size;\n    uniform sampler2D elevTexture;\n    varying vec2 vUv;\n    varying float vVisible;\n    void main() {\n      vUv = uv;\n      vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n      float elv = texture2D(elevTexture, vUv).r;\n      vec3 vNormal = normalMatrix * normal;\n      vVisible = step(0.0, dot(-normalize(mvPosition.xyz), normalize(vNormal)));\n      mvPosition.z += 0.6 * elv;\n      gl_PointSize = size;\n      gl_Position = projectionMatrix * mvPosition;\n    }\n  ",fragmentShader:"\n    uniform sampler2D colorTexture;\n    uniform sampler2D alphaTexture;\n    uniform float paint_ocean;\n    varying vec2 vUv;\n    varying float vVisible;\n    void main() {\n      if (floor(vVisible + 0.1) == 0.0) discard;\n      float alpha = texture2D(alphaTexture, vUv).r;\n      vec3 color = texture2D(colorTexture, vUv).rgb;\n      gl_FragColor = vec4(color.r, color.g, color.b, 1.0);\n    }\n  ",transparent:!0}),i=new THREE.Points(n,o);scene.add(i);const s=new THREE.HemisphereLight(16777215,526368,3);scene.add(s);const l=createStarfield(4500,starSprite);scene.add(l),window.addEventListener("resize",onWindowResize)}function onWindowResize(){camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix(),renderer.setSize(window.innerWidth,window.innerHeight)}function animate(){requestAnimationFrame(animate),orbitControl.update(),renderer.render(scene,camera)}function initGUI(){function e(){window.innerWidth<500&&(gui.domElement.style.height="200px",gui.domElement.style.left="0px",gui.domElement.style.top="0px",gui.domElement.style.transform="scale(0.9)")}gui=new lil.GUI({autoPlace:!0}),document.querySelector(".lil-gui").appendChild(gui.domElement),gui.domElement.style.top="1.8rem",gui.domElement.style.borderRadius="8px",gui.domElement.classList.add("lil-gui"),window.addEventListener("resize",e),e(),gui.add(uniforms.size,"value",1,10).name("Point Size");const r=gui.add({year:2e3},"year",2e3,2024,1).name("Timeline");gui.add({rotation:!0},"rotation").name("Rotation").onChange((e=>{orbitControl.autoRotate=e})),r.onChange((e=>{const a=Math.round(e);currentTextureArray.length>0&&a!==currYear&&(uniforms.colorTexture.value=currentTextureArray[a-currMin],currYear=a),r.setValue(a)}));const a=gui.addFolder("Data"),t=document.createElement("div");t.classList.add("text-display"),t.innerHTML="\n    <p>Welcome to Earth!</p>\n    <br/>\n    <p>Earth is a unique planet, covering about 71% with water and supporting diverse life forms.</p>\n  ",a.domElement.appendChild(t),a.add({Data:"Standard"},"Data",["Standard","Avg Land Temperature","Avg Ocean Temperature","Population","Vegetation","Carbon Monoxide","Wildfire"]).onChange((e=>{let a="",n="";switch(overlayImageEl.style.display="block",overlayImage2El.style.display="block",e){case"Avg Land Temperature":a="../../assets/globe/avg_temperature_land/colorbar.png",currentTextureArray=tempTextures,currYear=2e3,uniforms.colorTexture.value=textureLoader.load("../../assets/globe/avg_temperature_land/2000.png"),gsap.to(camera.position,{x:0,y:0,z:5,duration:2,ease:"power3.inOut"}),currMin=2e3,currMax=2024,t.innerHTML='\n            <p>This data comes from <a href="https://lpdaac.usgs.gov/products/mod11c1v061/" target="_blank">MOD11C1</a>.</p>\n            <br/>\n            <p>Daytime land surface temperature maps are created using thermal infrared data from NASA\'s Terra and Aqua satellites.</p>\n          ';break;case"Avg Ocean Temperature":a="../../assets/globe/avg_temperature_ocean/colorbar.png",currentTextureArray=oceanTempTextures,currYear=2010,uniforms.colorTexture.value=textureLoader.load("../../assets/globe/avg_temperature_ocean/2010.jpeg"),gsap.to(camera.position,{x:0,y:0,z:5,duration:2,ease:"power3.inOut"}),currMin=2010,currMax=2024,t.innerHTML='\n            <p>This data comes from <a href="https://modis.gsfc.nasa.gov/" target="_blank">MODIS</a>.</p>\n            <br/>\n            <p>Global ocean temperature measurements are provided by NASA\'s MODIS instruments.</p>\n          ';break;case"Population":a="../../assets/globe/population/colorbar.png",n="../../assets/globe/population/world_pop.png",uniforms.colorTexture.value=textureLoader.load("../../assets/globe/population/population.jpeg"),currentTextureArray=[],gsap.to(camera.position,{x:0,y:0,z:6,duration:2,ease:"power3.inOut"}),currYear=2e3,currMin=2e3,currMax=2e3,t.innerHTML='\n            <p>This data comes from <a href="https://sedac.ciesin.columbia.edu/data/set/gpw-v4-population-density-rev11/data-download" target="_blank">SEDAC</a>.</p>\n            <br/>\n            <p>Population distribution insights are key for understanding natural resource usage.</p>\n          ';break;case"Vegetation":a="../../assets/globe/vegetation/colorbar.png",currentTextureArray=vegTextures,uniforms.colorTexture.value=textureLoader.load("../../assets/globe/vegetation/2013.jpeg"),gsap.to(camera.position,{x:0,y:0,z:4,duration:2,ease:"power3.inOut"}),currYear=2013,currMin=2013,currMax=2024,t.innerHTML='\n            <p>This data comes from <a href="https://modis.gsfc.nasa.gov/" target="_blank">MODIS</a>.</p>\n            <br/>\n            <p>Vegetation data provides insight into changes in land cover over time.</p>\n          ';break;case"Carbon Monoxide":a="../../assets/globe/carbon/colorbar.png",currentTextureArray=carbonTextures,uniforms.colorTexture.value=textureLoader.load("../../assets/globe/carbon/2015.jpeg"),gsap.to(camera.position,{x:0,y:0,z:5,duration:2,ease:"power3.inOut"}),currYear=2015,currMin=2015,currMax=2022,t.innerHTML='\n            <p>This data comes from the <a href="https://www2.acom.ucar.edu/mopitt" target="_blank">MOPITT</a> dataset.</p>\n            <br/>\n            <p>Monitored carbon monoxide concentrations are crucial for atmospheric studies.</p>\n          ';break;case"Wildfire":a="../../assets/globe/fire/colorbar.png",currentTextureArray=fireTextures,uniforms.colorTexture.value=textureLoader.load("../../assets/globe/fire/2015.jpeg"),gsap.to(camera.position,{x:0,y:0,z:4,duration:2,ease:"power3.inOut"}),currYear=2015,currMin=2015,currMax=2022,t.innerHTML='\n            <p>This data comes from the <a href="https://lpdaac.usgs.gov/products/mod14a1v061/" target="_blank">MOD14A1</a> dataset.</p>\n            <br/>\n            <p>Wildfire data highlights the atmospheric impact of fires.</p>\n          ';break;default:uniforms.colorTexture.value=textureLoader.load("../../assets/globe/00_earthmap1k.jpg"),currentTextureArray=[],currYear=2e3,currMin=2e3,currMax=2024,t.innerHTML="\n            <p>Welcome to Earth!</p>\n            <br/>\n            <p>Earth is a unique planet covering about 71% water and supporting diverse life forms.</p>\n          ",overlayImageEl.style.display="none",overlayImage2El.style.display="none"}r.min(currMin),r.max(currMax),r.setValue(currYear),currentImage=a,currentImage2=n||"",overlayImageEl.src=currentImage,overlayImage2El.src=currentImage2,overlayImageEl.style.display=currentImage?"block":"none",overlayImage2El.style.display=currentImage2?"block":"none"}))}function initOverlayImages(){overlayImageEl=document.getElementById("overlay-image"),overlayImage2El=document.getElementById("overlay-image2"),overlayImageEl.style.display="none",overlayImage2El.style.display="none"}function init(){initTextures(),initScene(),initOverlayImages(),initGUI(),animate()}window.addEventListener("DOMContentLoaded",init);